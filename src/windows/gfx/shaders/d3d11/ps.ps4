// Copyright (c) Christopher D. Dickson <cdd@matoya.group>
//
// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT License was not distributed with this file,
// You can obtain one at https://spdx.org/licenses/MIT.html.

struct VS_OUTPUT {
	float4 position : SV_POSITION;
	float2 texcoord : TEXCOORD;
};

cbuffer VS_CONSTANT_BUFFER : register(b0) {
	float width;
	float height;
	float vp_height;
	uint filter;
	uint effect;
	uint format;
	uint colorspace;
	uint rotation;
	uint __pad[1];
};

SamplerState ss {
};

Texture2D tex0 : register(t0);
Texture2D tex1 : register(t1);
Texture2D tex2 : register(t2);

inline float4 yuv_to_rgba(float y, float u, float v)
{
	// Using "RGB to YCbCr color conversion for HDTV" (ITU-R BT.709)

	y = (y - 0.0625) * 1.164;
	u = u - 0.5;
	v = v - 0.5;

	float r = y + 1.793 * v;
	float g = y - 0.213 * u - 0.533 * v;
	float b = y + 2.112 * u;

	return float4(r, g, b, 1.0);
}

inline float4 yuv_to_rgba_rec2020(float y, float u, float v)
{
	// Using "RGB to YCbCr color conversion for UHDTV" (ITU-R BT.2020)

	// y = (y - 0.0625) * 1.164;
	// u = u - 0.5;
	// v = v - 0.5;

	// Thanks to colour-science (TODO: Add proper link)
	const float Y_min = 0.06256109f;
	const float Y_max = 0.91886608f;
	const float Y_minmax_dt = Y_max - Y_min;
	const float C_min = 0.06256109f;
	const float C_max = 0.93841642f;
	const float C_minmax_2 = (C_min + C_max) * 0.5f; // TODO: Should we just set this to 0.5f, like in yuv_to_rgba?
	const float C_minmax_dt = C_max - C_min;
	
	y = y - Y_min;
	u = u - C_minmax_2;
	v = v - C_minmax_2;

	y = y * 1.0f / Y_minmax_dt;
	u = u * 1.0f / C_minmax_dt;
	v = v * 1.0f / C_minmax_dt;

	static const float K_r = 0.2627f;
	static const float K_b = 0.0593f;

	float r = y + (2.0f - 2.0f * K_r) * v;
	float b = y + (2.0f - 2.0f * K_b) * u;
	float g = (y - K_r * r - K_b * b) / (1.0f - K_r - K_b);

	return float4(r, g, b, 1.0);
}

inline void gaussian(uint type, float w, float h, inout float2 uv)
{
	float2 res = float2(w, h);
	float2 p = uv * res;
	float2 c = floor(p) + 0.5;
	float2 dist = p - c;

	// Sharp
	if (type == 3) {
		dist = 16.0 * dist * dist * dist * dist * dist;

	// Soft
	} else {
		dist = 4.0 * dist * dist * dist;
	}

	p = c + dist;

	uv = p / res;
}

inline void scanline(uint effect, float y, float h, inout float4 rgba)
{
	float n = (effect == 1) ? 1.0 : 2.0;

	if (fmod(floor(y * h), n * 2.0) < n)
		rgba *= 0.7;
}

float4 main(VS_OUTPUT input) : SV_TARGET
{
	float4 rgba = 0.0;
	float2 uv = input.texcoord;

	// Rotation
	if (rotation == 1 || rotation == 3) {
		float tmp = uv[0];
		uv[0] = uv[1];
		uv[1] = tmp;
	}

	// Flipped vertically
	if (rotation == 1 || rotation == 2)
		uv[1] = 1.0 - uv[1];

	// Flipped horizontally
	if (rotation == 2 || rotation == 3)
		uv[0] = 1.0 - uv[0];

	// Gaussian
	if (filter == 3 || filter == 4)
		gaussian(filter, width, height, uv);

	// NV12, NV16
	if (format == 2 || format == 5) {
		float y = tex0.Sample(ss, uv).r;
		float u = tex1.Sample(ss, uv).r;
		float v = tex1.Sample(ss, uv).g;

		if (colorspace == 3) {
			rgba = yuv_to_rgba_rec2020(y, u, v);
		} else {
			rgba = yuv_to_rgba(y, u, v);
		}

	// I420, I444
	} else if (format == 3 || format == 4) {
		float y = tex0.Sample(ss, uv).r;
		float u = tex1.Sample(ss, uv).r;
		float v = tex2.Sample(ss, uv).r;

		if (colorspace == 3) {
			rgba = yuv_to_rgba_rec2020(y, u, v);
		} else {
			rgba = yuv_to_rgba(y, u, v);
		}

	// AYUV
	} else if (format == 8) {
		float y = tex0.Sample(ss, uv).r;
		float u = tex0.Sample(ss, uv).g;
		float v = tex0.Sample(ss, uv).b;

		if (colorspace == 3) {
			rgba = yuv_to_rgba_rec2020(y, u, v);
		} else {
			rgba = yuv_to_rgba(y, u, v);
		}

	// RGBA16F, scRGB linear
	} else if (format == 9 && colorspace == 2) {
		rgba = tex0.Sample(ss, uv);

	// RGB10A2, either sRGB or HDR10
	} else if (format == 10 && (colorspace == 1 || colorspace == 3)) {
		if (colorspace == 1) {
			// sRGB - do nothing different
			rgba = tex0.Sample(ss, uv);
		} else {
			// HDR10
			// TODO: Do we need to do a st 2084 encoding/decoding?
			// TODO: Do we need to do any tonemapping?
			rgba = tex0.Sample(ss, uv);
		}		

	// BGRA
	} else {
		rgba = tex0.Sample(ss, uv);
	}

	// Scanlines
	if (effect == 1 || effect == 2)
		scanline(effect, input.texcoord.y, vp_height, rgba);

	return rgba;
}
